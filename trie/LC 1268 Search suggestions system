//method 1: trie
class TrieNode {
    public:
    TrieNode* next[26];
    bool isEnd;
    TrieNode() {
        for (int i = 0; i < 26; i++) {
            next[i] = NULL;
        }
        isEnd = false;
    }
};

class Solution {
    vector<vector<string>>res;
    TrieNode* root;
public:
    vector<vector<string>> suggestedProducts(vector<string>& p, string s) {
        root = new TrieNode();
        for (auto word : p) {
            TrieNode* node = root;
            for (auto ch : word) {
                if (node->next[ch - 'a'] == NULL) {
                    node->next[ch - 'a'] = new TrieNode();
                }
                node = node->next[ch - 'a'];
            }
            node->isEnd = true;
        }
        TrieNode* node = root;
        string temp = "";
        for (int i = 0; i < s.size(); i++) {
            char ch = s[i];
            if (node->next[ch - 'a'] == NULL) {
                for (int j = i; j < s.size(); j++) {
                    res.push_back({});
                }
                break;
            }
            node = node->next[ch - 'a'];
            temp.push_back(ch);
            vector<string>curr;
            dfs(node, temp, curr);
            res.push_back(curr);
        }
        return res;
    }
    
    void dfs(TrieNode* node, string& temp, vector<string>&curr) {
        if (curr.size() == 3) return;
        if (node->isEnd) curr.push_back(temp);
        
        for (int i = 0; i < 26; i++) {
            if (node->next[i] == NULL) continue;
            temp.push_back(i + 'a');
            dfs(node->next[i], temp, curr);
            temp.pop_back();
        }
    }
};


// Method 2: sorting
// class Solution {
//     vector<vector<string>>res;
// public:
//     vector<vector<string>> suggestedProducts(vector<string>& p, string s) {
//         sort(p.begin(), p.end());
//         vector<vector<string>>res;
//         string pre;
       
//         for (int i = 0; i < s.size(); i++) {
//             pre.push_back(s[i]);
//             auto iter = lower_bound(p.begin(), p.end(), pre);
//             vector<string>curr;
//             int len = pre.size();
//             for (int k = 0; k < 3; k++) {
                
//                 if (iter == p.end()) break;
//                 if (iter->substr(0, len) != pre) break;
//                 curr.push_back(*iter);
//                 iter++;
//             }
//             res.push_back(curr);
//         }
//         return res;
//     }
// };
