/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head==null) return head;
        Node p = head;
        while(p!=null) {
            Node copyNode = new Node(p.val);
            copyNode.next=p.next;
            p.next=copyNode;
            p=copyNode.next;
        }
        p=head;
        while(p!=null) {
            p.next.random=p.random!=null? p.random.next:null;
            p=p.next.next;
        }
        Node p_oldList = head;
        Node p_copyList = head.next;
        Node copy=head.next;
        while (p_oldList!=null) {
            p_oldList.next=p_copyList.next;
            p_copyList.next=(p_copyList.next!=null)? p_copyList.next.next:null;
            p_oldList=p_oldList.next;
            p_copyList=p_copyList.next;
        }
        return copy;
    }
}
