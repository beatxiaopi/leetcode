/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode newHead=null;
        ListNode curr=head;
        ListNode revHead=null;
        ListNode tail=null;
        while(curr!=null) {
            int count=0;
            while(count<k && curr!=null) {
                curr=curr.next;
                count++; 
            }
            if(count==k) {
                revHead=reverseList(head, k);
                if(newHead==null) newHead=revHead;
                if(tail!=null) tail.next=revHead;
                tail=head;
                head=curr;
            }
        }
        if(tail!=null) tail.next=head;
        return newHead==null? head:newHead;
    }
    private ListNode reverseList(ListNode head, int k) {
        ListNode prev=null;
        ListNode temp;
        ListNode curr;
        curr=head;
        for(int i=0; i<k; i++) {
            temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
}
