class Solution {
    public int minDistance(String word1, String word2) {
        int len1=word1.length(), len2=word2.length();
        // pattern here is to find the longest common subsequence
        int [][] dp = new int[len1+1][len2+1];
        Arrays.stream(dp).forEach(a->Arrays.fill(a,0));
        if (len1==0) return len2;
        for (int i=1; i<len1+1; i++) {
            for (int j=1; j<len2+1; j++) {
                if (word1.charAt(i-1)==word2.charAt(j-1)) {
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else dp[i][j]=Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[len1][len2];
    }
}
