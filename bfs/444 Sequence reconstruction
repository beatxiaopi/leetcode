class Solution {
    public boolean sequenceReconstruction(int[] nums, List<List<Integer>> sequences) {
        Map<Integer, Set<Integer>> map = new HashMap<>();
        int [] inDegree = new int[nums.length+1];
        for (List<Integer> list : sequences) {
            for (int i = 0; i < list.size()-1; i++) {
                map.computeIfAbsent(list.get(i), k -> new HashSet<>()).add(list.get(i+1));
            }
        }
        for (int key : map.keySet()) {
            for (int val : map.get(key)) {
                inDegree[val] += 1;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 1; i <=nums.length; i++) {
            if (inDegree[i] == 0) {
                q.add(i);
            }
        }
        List<Integer> res = new ArrayList<>();
        while (!q.isEmpty()) {
            if (q.size() > 1) return false;
            int curr = q.poll();
            res.add(curr);
            if (map.containsKey(curr)) {
                for (int next : map.get(curr)) {
                    inDegree[next] -= 1;
                    if (inDegree[next] == 0) {
                        q.add(next);
                    }
                }
            }
        }
        int [] ret = new int[res.size()];
        for (int i = 0; i < res.size(); i++) {
            ret[i] = res.get(i);
        }
        return Arrays.equals(ret, nums);
    }
}
