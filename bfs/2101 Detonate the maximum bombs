class Solution {
    public int maximumDetonation(int[][] bombs) {
        int n = bombs.length;
        Map<Integer, List<Integer>> adj = new HashMap<>();
        for (int i = 0; i < n; i++) {
            adj.put(i, new ArrayList<>()); 
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                double dist = Math.sqrt(Math.pow((bombs[i][0] - bombs[j][0]), 2)
                                        + Math.pow((bombs[i][1] - bombs[j][1]), 2));
                if (dist <= (double) bombs[i][2]) {
                    adj.get(i).add(j);
                }
            }
        }
        
        int res = 0;
        for (int i = 0; i < n; i++) {
            int [] visited = new int [n];
            Queue<Integer> q = new LinkedList<>();
            q.add(i);
            visited[i] = 1;
            int count = 1;
            while (!q.isEmpty()) {
                int curr = q.poll();
                for (int next : adj.get(curr)) {
                    if (visited[next] != 0) continue;
                    q.add(next);
                    visited[next] = 1;
                    count +=1;
                }
            }
            res = Math.max(res, count);
        }
        return res;
    }
}
