class Solution {
    int visited[50][50];
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        int dirs[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        queue<pair<int, int>>q;
        int res = 0;
        for(int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) continue;
                q.push({i,j});
                visited[i][j]= 1;
                int count = 1;
                while(!q.empty()) {
                    auto [x, y] = q.front();
                    q.pop();
                    for(int k = 0; k < 4; k++) {
                        int a = x + dirs[k][0];
                        int b = y + dirs[k][1];
                        if (a < 0 || a >= m || b < 0 || b >= n) continue;
                        if (visited[a][b]) continue;
                        if (grid[a][b] != 1) continue;
                        visited[a][b] = 1;
                        count++;
                        q.push({a,b});
                    }
                }
                res = max(res, count);
            }
        }
        return res;
    }
};
