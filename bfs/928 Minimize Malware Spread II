//ref: https://leetcode.com/problems/minimize-malware-spread-ii/discuss/915759/JAVA-or-BFS-or-56-or
//ref: https://leetcode.com/problems/minimize-malware-spread-ii/discuss/1584177/Java-or-Simple-BFS-or-Intuitive-and-easy-to-understand

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                if (graph[i][j] == 1) {
                    adj.get(i).add(j);
                }
            }
        }
        Arrays.sort(initial);
        int ans = 0;
        int infect = n;
        for (int remove : initial) {
            Queue<Integer> q = new LinkedList<>();
            Set<Integer> visited = new HashSet<>();
            visited.add(remove);
            for (int iter : initial) {
                if (iter != remove) {
                    q.add(iter);
                    visited.add(iter);
                }

            }
            while (!q.isEmpty()) {
                int curr = q.poll();
                for (int next : adj.get(curr)) {
                    if (visited.contains(next)) {
                        continue;
                    }
                    q.add(next);
                    visited.add(next);
                }
            }
            if (visited.size() - 1 < infect) {
                infect = visited.size() - 1;
                ans = remove;
            }
        }
        return ans;
    }
}
