class Solution {
    public boolean containsCycle(char[][] grid) {
        int m = grid.length, n = grid[0].length;
        boolean [][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if (!visited[i][j] && dfs(grid, grid[i][j], i, j, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    private boolean dfs(char[][] grid, char target, int i, int j, boolean [][] visited) {
        int m = grid.length, n = grid[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != target) return false;
        if (visited[i][j]) return true;
        visited[i][j] = true;
        grid[i][j] = '#';
        boolean found = dfs(grid, target, i+1, j, visited)
            || dfs(grid, target, i-1, j, visited)
            || dfs(grid, target, i, j+1, visited)
            || dfs(grid, target, i, j-1, visited);
        grid[i][j] = target;
        return found;
    }
}
