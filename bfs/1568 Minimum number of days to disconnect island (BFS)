class Solution {
    public int minDays(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int count = bfs(grid);
        if(count > 1 || count ==0) return 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if(grid[i][j] == 0) continue;
                grid[i][j] = 0;
                count = bfs(grid);
                if (count > 1 || count ==0) return 1;
                grid[i][j] = 1;
            }
        }
        return 2;
    }
    private int bfs(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        boolean [][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(visited[i], false);
        }
        int [][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        int count = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) continue;
                if (visited[i][j]) continue;
                count += 1;
                Queue<int []> q = new LinkedList<>();
                q.add(new int [] {i,j});
                visited[i][j] = true;
                while (!q.isEmpty()) {
                    int [] curr = q.poll();
                    for (int k = 0; k < 4; k++) {
                        int x = curr[0] + dirs[k][0];
                        int y = curr[1] + dirs[k][1];
                        if (x < 0 || x >= m || y < 0 || y >= n) continue;
                        if (grid[x][y] == 0) continue;
                        if (visited[x][y]) continue;
                        q.add(new int [] {x, y});
                        visited[x][y] = true;
                    }
                }
                
                if (count == 2) return 2;
            }
        }
        return count;
    }
}
