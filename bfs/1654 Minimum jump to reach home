class Solution {
    public int minimumJumps(int[] forbidden, int a, int b, int x) {
        if ( x == 0) return 0;
        int step = 0;
        Queue<int []> q = new LinkedList<>();
        int [][] visited = new int[6000][2];
        for (int temp : forbidden) {
            visited[temp][0] = -1;
            visited[temp][1] = -1;
        }
        int limit = Math.max(x, Arrays.stream(forbidden).max().getAsInt()) + b;
        q.add(new int [] {0, 0});
        visited[0][0] = 1;
        while (!q.isEmpty()) {
            int len = q.size();
            step +=1;
            while (len-- > 0) {
                int [] curr = q.poll();
                if (curr[0] <= limit && visited[curr[0]+a][0] == 0) {
                    q.add(new int [] {curr[0]+a, 0});
                    visited[curr[0]+a][0] = 1;
                    if (curr[0] + a == x) return step;
                }
                if (curr[1] == 0) {
                    if (curr[0] - b >= 0 && visited[curr[0]-b][1] == 0) {
                        q.add(new int [] {curr[0]-b, 1});
                        visited[curr[0] -b][1] = 1;
                        if (curr[0] -b == x) return step;
                    }
                }
            }
        }
        return -1;
    }
}
