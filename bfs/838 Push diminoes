class Solution {
    public String pushDominoes(String dominoes) {
        Deque <int []> q = new ArrayDeque<>();
        int n = dominoes.length();
        int [] res = new int[n];
        for (int i = 0; i < n; i++) {
            char ch = dominoes.charAt(i);
            if (ch == 'R') {
                res[i] = 1;
                q.add(new int [] {i,1});
            }
            else if (ch == 'L') {
                res[i] = -1;
                q.add(new int [] {i,-1});
            }
            else res[i] = 0;
        }
        
        while (!q.isEmpty()) {
            int len = q.size();
            Map<Integer, Integer> next = new HashMap<>();
            for (int i = 0; i < len; i++) {
                int [] curr = q.poll();
                int a = curr[0];
                int b = curr[1];
                if (b == 1 && a+1 < n && res[a+1] == 0) {
                    next.put(a+1, next.getOrDefault(a+1, 0)+1);
                }
                if (b == -1 && a-1 >= 0 && res[a-1] == 0) {
                    next.put(a-1, next.getOrDefault(a-1, 0)-1);
                }
                
            }
            for (int temp : next.keySet()) {
                q.add(new int [] {temp, next.get(temp)});
                res[temp] = next.get(temp);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (res[i] == 1) sb.append('R');
            else if (res[i] == -1) sb.append('L');
            else sb.append('.');
        }
        return sb.toString();
    }
}


// ref: https://leetcode.com/problems/push-dominoes/discuss/1562258/Simple-java-soltuion-using-bfs
// ref: https://github.com/wisdompeak/LeetCode/blob/master/BFS/838.Push-Dominoes/838.Push-Dominoes.cpp
