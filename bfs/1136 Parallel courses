class Solution {
    public int minimumSemesters(int n, int[][] relations) {
        List<Integer> [] adj = new ArrayList[n+1];
        int [] inDegree = new int [n+1];
        for (int i = 1; i <= n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < relations.length; i++) {
            int prev = relations[i][0];
            int next = relations[i][1];
            adj[prev].add(next);
            inDegree[next] += 1;
        }
        Queue<Integer> q = new LinkedList<>();
        int count = 0;
        int semester = 0;
        for (int i = 1; i <= n; i++) {
            if (inDegree[i] ==0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int len = q.size();
            while (len-- > 0) {
                int curr = q.poll();
                count += 1;
                for (int next : adj[curr]) {
                    inDegree[next] -= 1;
                    if (inDegree[next] == 0) {
                        q.add(next);
                    }
                }
            }
            semester += 1;
        }
        return count == n? semester:-1;
    }
}
