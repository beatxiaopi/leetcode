class Solution {
    public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') bfs(i, 0, board);
            if (board[i][n-1] == 'O') bfs(i, n-1, board);
        }
        for (int j = 0; j < n; j++) {
            if (board[0][j] == 'O') bfs(0, j, board);
            if (board[m-1][j] == 'O') bfs(m-1, j, board);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                else if (board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    private void bfs(int i, int j, char [][] board) {
        int m = board.length;
        int n = board[0].length;
        Deque<int []> q = new ArrayDeque<>();
        q.add(new int [] {i,j});
        board[i][j] = '#';
        int [][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        while (!q.isEmpty()) {
            int [] curr = q.poll();
            for (int k = 0; k < 4; k++) {
                int x = curr[0] + dirs[k][0];
                int y = curr[1] + dirs[k][1];
                if (x < 0 || x >= m || y < 0 || y >= n) {
                    continue;
                }
                else if (board[x][y] != 'O') {
                    continue;
                }
                board[x][y] = '#';
                q.add(new int [] {x,y});
            }
        }
    }
}
