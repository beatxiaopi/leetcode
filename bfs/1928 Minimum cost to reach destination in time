class Solution {
    public int minCost(int maxTime, int[][] edges, int[] passingFees) {
        int n = passingFees.length;
        int [][] memo = new int[n+1][maxTime+1];
        Arrays.stream(memo).forEach(a -> Arrays.fill(a, Integer.MAX_VALUE/2));
        int [] earliestTime = new int [n+1];
        Arrays.fill(earliestTime, maxTime);
        memo[0][0] = passingFees[0];
        Queue<int []> q = new LinkedList<>();
        q.add(new int [] {0, 0});
        Map<Integer, List<int []>> map = new HashMap<>();
        for (int [] edge : edges) {
            map.computeIfAbsent(edge[0], k -> new ArrayList()).add(new int [] {edge[1], edge[2]});
            map.computeIfAbsent(edge[1], k -> new ArrayList()).add(new int [] {edge[0], edge[2]});
        }
        while (!q.isEmpty()) {
            int [] curr = q.poll();
            int city = curr[0];
            int time = curr[1];
            int fee = memo[city][time];
            for (int [] next : map.get(city)) {
                int nextCity = next[0];
                int nextFee = fee + passingFees[nextCity];
                int nextTime = time + next[1];
                if (nextTime > maxTime) continue;
                if (nextTime > earliestTime[nextCity] && nextFee > memo[nextCity][earliestTime[nextCity]]) {
                    continue;
                }
                if (nextFee < memo[nextCity][nextTime]) {
                    memo[nextCity][nextTime] = nextFee;
                    q.add(new int [] {nextCity, nextTime});
                    earliestTime[nextCity] = nextTime;
                }
            }
        }
        int res = Integer.MAX_VALUE/2;
        for (int i = 0; i <= maxTime; i++) {
            res = Math.min(res, memo[n-1][i]);
        }
        return res == Integer.MAX_VALUE/2? -1: res;
    }
}

//PriorityQueue solution 2
class Solution {
    public int minCost(int maxTime, int[][] edges, int[] costVtx) {
        int N = costVtx.length;
        ArrayList<int[]>[] graph = new ArrayList[N];
        for(int i = 0; i < N ; i++) graph[i] = new ArrayList<>();
        
        for(int[] e : edges){
            int u = e[0], v = e[1], w = e[2];
            graph[u].add(new int[]{v, w});
            graph[v].add(new int[]{u, w});
        }
        int[] timeHold = new int[N];
        Arrays.fill(timeHold, (int) 1e9);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> {
            return a[1] - b[1];
        });
        // vtx | cost | time 
        pq.add(new int[]{0, costVtx[0], 0});
        timeHold[0] = 0;
        while(!pq.isEmpty()){
            int[] p = pq.remove();
            int vtx = p[0], cost = p[1], time = p[2]; 
            if(vtx == costVtx.length - 1) return cost;
            for(int[] e : graph[vtx]){
                int v = e[0], n_time = e[1];
                if(time + n_time > maxTime) continue;
                if(time + n_time < timeHold[v]){
                    timeHold[v] = n_time + time;
                    pq.add(new int[]{v, cost + costVtx[v], timeHold[v]});
                }
            }
        }
        return -1;
    }
}
