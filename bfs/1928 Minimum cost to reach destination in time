class Solution {
    public int minCost(int maxTime, int[][] edges, int[] passingFees) {
        int n = passingFees.length;
        int [][] memo = new int[n+1][maxTime+1];
        Arrays.stream(memo).forEach(a -> Arrays.fill(a, Integer.MAX_VALUE/2));
        int [] earliestTime = new int [n+1];
        Arrays.fill(earliestTime, maxTime);
        memo[0][0] = passingFees[0];
        Queue<int []> q = new LinkedList<>();
        q.add(new int [] {0, 0});
        Map<Integer, List<int []>> map = new HashMap<>();
        for (int [] edge : edges) {
            map.computeIfAbsent(edge[0], k -> new ArrayList()).add(new int [] {edge[1], edge[2]});
            map.computeIfAbsent(edge[1], k -> new ArrayList()).add(new int [] {edge[0], edge[2]});
        }
        while (!q.isEmpty()) {
            int [] curr = q.poll();
            int city = curr[0];
            int time = curr[1];
            int fee = memo[city][time];
            for (int [] next : map.get(city)) {
                int nextCity = next[0];
                int nextFee = fee + passingFees[nextCity];
                int nextTime = time + next[1];
                if (nextTime > maxTime) continue;
                if (nextTime > earliestTime[nextCity] && nextFee > memo[nextCity][earliestTime[nextCity]]) {
                    continue;
                }
                if (nextFee < memo[nextCity][nextTime]) {
                    memo[nextCity][nextTime] = nextFee;
                    q.add(new int [] {nextCity, nextTime});
                    earliestTime[nextCity] = nextTime;
                }
            }
        }
        int res = Integer.MAX_VALUE/2;
        for (int i = 0; i <= maxTime; i++) {
            res = Math.min(res, memo[n-1][i]);
        }
        return res == Integer.MAX_VALUE/2? -1: res;
    }
}
