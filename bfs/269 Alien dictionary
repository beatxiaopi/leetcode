class Solution {
    public String alienOrder(String[] words) {
        StringBuilder sb = new StringBuilder();
        Map<Character, List<Character>> dict = new HashMap<>();
        Map<Character, Integer> inDegree = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            for (char ch : words[i].toCharArray()) {
                inDegree.put(ch, 0);
                dict.put(ch, new ArrayList<>());
            }
        }
        for (int i = 0; i < words.length-1; i++) {
            String s1 = words[i];
            String s2 = words[i+1];
            if (s1.length() > s2.length() && s1.startsWith(s2)) return "";
            for (int j = 0; j < Math.min(s1.length(), s2.length()); j++) {
                char ch1 = s1.charAt(j);
                char ch2 = s2.charAt(j);
                if (ch1 != ch2) {
                    dict.get(ch1).add(ch2);
                    inDegree.put(ch2, inDegree.get(ch2)+1);
                    break;
                }
            }
        }
        Queue<Character> q = new LinkedList<>();
        for (char ch : inDegree.keySet()) {
            if (inDegree.get(ch) == 0) {
                q.add(ch);
            }
        }
        while (!q.isEmpty()) {
            char ch = q.poll();
            sb.append(ch);
            if (dict.get(ch) != null) {
                for (char next : dict.get(ch)) {
                    inDegree.put(next, inDegree.get(next)-1);
                    if (inDegree.get(next) == 0) {
                    q.add(next);
                    }
                }
            }
        }
        return sb.length() == inDegree.size() ? sb.toString(): "";
    }
}
