class Solution {
    public int shortestPathLength(int[][] graph) {
        int n = graph.length;
        boolean [][] visited = new boolean[n][1<<n];
        Queue<int []> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            q.add(new int [] {i, 1<<i});
            visited[i][1<<i] = true;
        }
        int step = 0;
        while (!q.isEmpty()) {
            int len = q.size();
            while (len-- >0) {
                int [] curr = q.poll();
                for (int next : graph[curr[0]]) {
                    int nexS = curr[1] | (1<<next);
                    if (visited[next][nexS]) continue;
                    if (nexS == (1<<n) - 1) return step+1;
                    q.add(new int [] {next, nexS});
                    visited[next][nexS] = true;
                }
            }
            step +=1;
        }
        return 0;
    }
}
