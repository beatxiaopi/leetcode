class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int [] visited = new int[numCourses];
        Arrays.fill(visited, 0);
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < prerequisites.length; i++) {
            map.computeIfAbsent(prerequisites[i][1], k -> new ArrayList()).add(prerequisites[i][0]);
        }
        for (int i = 0; i < numCourses; i++) {
            if(!dfs(i, visited, map)) return false;
        }
        return true;
    }
    private boolean dfs (int i, int [] visited, Map<Integer, List<Integer>> map) {
        if (visited[i] == 1) return true;
        visited[i] = 2;
        if (map.get(i) != null) {
            for (int next : map.get(i)) {
                if (visited[next] == 1) continue;
                if (visited[next] == 2) return false;
                if (!dfs(next, visited, map)) return false;

            }
        }
        visited[i] = 1;
        return true;
    }
}
