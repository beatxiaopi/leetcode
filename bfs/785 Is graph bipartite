class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int [] visited = new int[n];
        Arrays.fill(visited, -1);
        
        for (int i = 0; i < n; i++) {
            if (visited[i] != -1) continue;
            Deque <int []> q = new ArrayDeque<>();
            q.add(new int [] {i, 0});
            while(!q.isEmpty()) {
                int [] curr = q.poll();
                int node = curr[0];
                int group = curr[1];
                for (int adj : graph[node]) {
                    if (visited[adj] != -1) {
                        if (visited[adj] == group)
                            return false;
                    }
                    else {
                        q.add(new int [] {adj, 1-group});
                        visited[adj] = 1-group;
                    }
                }
            }
        }
        return true;
    }
}
