class Solution {
    public int shortestPath(int[][] grid, int k) {
        int m = grid.length, n = grid[0].length;
        if (m == 1 && n ==1) return 0;
        boolean [][][] visited = new boolean[m][n][k+1];
        Queue<int []> q = new LinkedList<>();
        q.add(new int [] {0, 0, 0});
        visited[0][0][0] = true;
        int step = 0;
        int [][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        
        while (!q.isEmpty()) {
            int len = q.size();
            while (len-- > 0) {
                int [] curr = q.poll();
                for (int p = 0; p < 4; p++) {
                    int x = curr[0] +dirs[p][0];
                    int y = curr[1] +dirs[p][1];
                    int obs = curr[2];
                    
                    if (x < 0 || x >=m || y < 0 || y >=n) continue;
                    if (x == (m-1) && y == (n-1)) return step+1;
                    
                    if (grid[x][y] == 1) {
                        if (obs == k) continue;
                        if (visited[x][y][obs+1]) continue;
                        visited[x][y][obs+1] = true;
                        q.add(new int [] {x, y, obs+1});
                    }
                    else if (grid[x][y] == 0) {
                        if (visited[x][y][obs]) continue;
                        visited[x][y][obs] = true;
                        q.add(new int [] {x, y, obs});
                    }
                }
            }
            step += 1;
        }
        return -1;
    }
}

