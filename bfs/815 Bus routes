class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        if (source == target) return 0;
        for (int i =0; i < routes.length; i++) {
            for (int j : routes[i]) {
                List<Integer> adj = map.getOrDefault(j, new ArrayList<>());
                adj.add(i);
                map.put(j, adj);
            }
        }
        Set<Integer> prevStop = new HashSet<>();
        Set<Integer> prevBus = new HashSet<>();
        Deque<Integer> q = new ArrayDeque<>();
        int step = -1;
        q.add(source);
        prevStop.add(source);
        while (!q.isEmpty()) {
            step += 1;
            int len = q.size();
            for (int i = 0; i < len; i++) {
                int curr = q.poll();
                for (int nextBus : map.get(curr)) {
                    if (prevBus.contains(nextBus)) continue;
                    prevBus.add(nextBus);
                    for (int nextStop : routes[nextBus]) {
                        if (prevStop.contains(nextStop)) continue;
                        if (nextStop == target) return step+1;
                        q.add(nextStop);
                        prevStop.add(nextStop);
                    }
                }
            }
        }
        return -1;
    }
}
