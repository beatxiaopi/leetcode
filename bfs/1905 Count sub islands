//ref:https://leetcode.com/problems/count-sub-islands/discuss/1284370/Java-or-BFS-DFS-or-Similar-to-Number-of-Islands

class Solution {
    int count =0;
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int m = grid1.length, n = grid1[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1) {
                    bfs(grid1, grid2, i, j);
                }
            }
        }
        return count;
    }
    private void bfs(int[][] grid1, int[][] grid2, int i, int j) {
        int m = grid1.length, n = grid1[0].length;
        int [][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        Queue<int []> q = new LinkedList<>();
        // boolean [][] visited = new boolean[m][n];
        
        q.add(new int [] {i, j});
        grid2[i][j] = -2;
        // visited[i][j] = true;
        int flag =1;
        while (!q.isEmpty()) {
            int [] curr = q.poll();
            if (grid1[curr[0]][curr[1]] != 1) flag = 0;
            
            for (int k = 0; k < 4; k++) {
                int x = curr[0] + dirs[k][0];
                int y = curr[1] + dirs[k][1];
                if (x < 0 || x >=m || y < 0 || y>=n) continue;
                if (grid2[x][y] !=1) continue;
                grid2[x][y] = -2;
                q.add(new int [] {x, y});
                
            }
        }
        if (flag ==1) count +=1;
    }
}
