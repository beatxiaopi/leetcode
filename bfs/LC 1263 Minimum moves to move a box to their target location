class Solution {
    public int minPushBox(char[][] grid) {
        int bx=-1, by=-1, px=-1, py=-1, tx=-1, ty=-1;
        int m = grid.length, n = grid[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 'B') {
                    bx = i;
                    by = j;
                    grid[i][j] = '.';
                }
                else if (grid[i][j] == 'S') {
                    px = i;
                    py = j;
                    grid[i][j] = '.';
                }
                else if (grid[i][j] == 'T') {
                    tx = i;
                    ty = j;
                    grid[i][j] = '.';
                }
            }
        }
        
        int [][][][] memo = new int[m][n][m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < m; k++) {
                    Arrays.fill(memo[i][j][k], -1);
                }
            }
        }
        int [][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        Deque<int []> q = new LinkedList<>();
        q.add(new int [] {bx, by, px, py});
        memo[bx][by][px][py] = 0;
        
        while (!q.isEmpty()) {
            int [] curr = q.pollFirst();
            bx = curr[0]; 
            by = curr[1]; 
            px = curr[2]; 
            py = curr[3];
            if (bx == tx && by == ty) return memo[bx][by][px][py];
            
            for (int k = 0; k < 4; k++) {
                int x = px + dirs[k][0];
                int y = py + dirs[k][1];
                if (x < 0 || x >= m || y < 0 || y >= n) continue;
                if (grid[x][y] != '.') continue;
                if (x == bx && y == by) continue;
                if (memo[bx][by][x][y] >= 0) continue;
                memo[bx][by][x][y] = memo[bx][by][px][py];
                q.addFirst(new int [] {bx, by, x, y});
            }
            if (Math.abs(bx-px) + Math.abs(by-py) == 1) {
                for (int k = 0; k < 4; k++) {
                    if (px + dirs[k][0] == bx && py + dirs[k][1] == by) {
                        int nx = bx + dirs[k][0];
                        int ny = by + dirs[k][1];
                        if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                        if (grid[nx][ny] != '.') continue;
                        if (memo[nx][ny][bx][by] >= 0) continue;
                        q.addLast(new int [] {nx, ny, bx, by});
                        memo[nx][ny][bx][by] = memo[bx][by][px][py] +1;
                        
                    }
                }
            }
        }
        return -1;
    }
}
