class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int m = board.length, n = board[0].length;
        if (board[click[0]][click[1]] == 'M') {
            board[click[0]][click[1]] = 'X';
            return board;
        }
        int [][] dirs = {{1,0}, {1,1}, {1,-1}, {0,1}, {0,-1}, {-1,0}, {-1,1}, {-1,-1}};
        int [][] visited = new int [m][n];
        for (int i =0; i < m; i++) {
            for (int j =0; j < n; j++) {
                visited[i][j] = 0;
            }
        }
        Deque<int []> q = new ArrayDeque<>();
        q.add(new int [] {click[0], click[1]});
        visited[click[0]][click[1]] = 1;
        while (!q.isEmpty()) {
            int [] curr = q.poll();
            int count = 0;
            List<int []> next = new ArrayList<>();
            for (int k = 0; k < 8; k++) {
                int x = curr[0] + dirs[k][0];
                int y = curr[1] + dirs[k][1];
                if (x < 0 || x >= m || y < 0 || y >= n) {
                    continue;
                }
                if (board[x][y] == 'M') count++;
                else {
                    if (visited[x][y] == 0) {
                        next.add(new int [] {x, y});
                    }
                }
            }
            if (count == 0) {
                board[curr[0]][curr[1]] = 'B';
                while (next.size() > 0) {
                    int [] p = next.remove(0);
                    q.add(p);
                    visited[p[0]][p[1]] = 1;
                }
            }
            else {
                board[curr[0]][curr[1]] = (char) ('0' + count);
            }
        }
        return board;
    }
}
