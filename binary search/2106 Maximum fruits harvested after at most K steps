class Solution {
public:
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
        int n = fruits.size();
        vector<int>presum(n);
        vector<int>pos(n);
        for (int i = 0; i < n; i++) {
            pos[i] = fruits[i][0];
            presum[i] = (i == 0 ? 0 : presum[i-1]) + fruits[i][1];
        }
        int right = lower_bound(pos.begin(), pos.end(), startPos) - pos.begin();
        int j = 0;
        int res = 0;
        for (int i = right; i < n; i++) {
            while (j <= startPos && pos[i] - startPos + (startPos - pos[j]) * 2 > k) {
                j++;
            }
            if (pos[j] <= startPos) res = max(res, presum[i] - (j==0? 0:presum[j-1]));
            else if (pos[i] - startPos <= k) res = max(res, presum[i] - (j==0? 0:presum[j-1]));
        }
        
        
        int left = upper_bound(pos.begin(), pos.end(), startPos) - pos.begin();
        j = n - 1;
        for (int i = left - 1; i >= 0; i--) {
            while (pos[j] >= startPos && startPos - pos[i] + (pos[j] - startPos) * 2 > k) {
                j--;
            }
            if (pos[j] >= startPos) res = max(res, presum[j] - (i==0? 0:presum[i-1]));
            else if (startPos - pos[i] <= k) res = max(res, presum[j] - (i==0? 0:presum[i-1]));
        }
        return res;
    }
};
