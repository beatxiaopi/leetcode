//Binary search + BFS method 1
class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int left = 0, right = 1e6;
        while (left < right) {
            int mid = left + (right - left)/2;
            // int mid = right - (right - left)/2;
            if (check(heights, mid)) right = mid;
            else left = mid + 1;
        }
        return left;
    }
    
    bool check(vector<vector<int>>& heights, int h) {
        int m = heights.size(), n = heights[0].size();
        vector<vector<int>>visited(m, vector<int>(n, 0));
        visited[0][0] = 1;
        vector<pair<int,int>> dir = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        queue<pair<int,int>>q;
        q.push({0,0});
        while (!q.empty()) {
            int a = q.front().first;
            int b = q.front().second;
            q.pop();
            for (int k = 0; k < 4; k++) {
                int x = a + dir[k].first;
                int y = b + dir[k].second;
                if (x < 0 || x >= m || y < 0 || y >= n) continue;
                if (abs(heights[a][b] - heights[x][y]) > h) continue;
                if (visited[x][y]) continue;
                q.push({x,y});
                visited[x][y] = 1;
            }
        }
        return visited[m - 1][n - 1] == 1;
    }
};

//union-find method 2
class Solution {
    int father[10001];
    int findFather(int x) {
        if (father[x] != x) {
            father[x] = findFather(father[x]);
        }
        return father[x];
    }
    
    void Union(int x, int y) {
        x = father[x];
        y = father[y];
        if (x < y) father[y] = x;
        else father[x] = y;
    }
    
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int m = heights.size(), n = heights[0].size();
        for (int i = 0; i < m * n; i++) father[i] = i; //initialization
        vector<vector<int>>adj; //adjacent edges and effort
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i != m - 1) adj.push_back({abs(heights[i][j] - heights[i+1][j]), i*n+j, (i+1)*n+j});
                if (j != n - 1) adj.push_back({abs(heights[i][j] - heights[i][j+1]), i*n+j, i*n+j+1});
            }
        }
        sort(adj.begin(), adj.end());
        for (auto x : adj) {
            if (findFather(x[1]) != findFather(x[2])) {
                Union(x[1], x[2]);
            }
            if (findFather(0) == findFather((m - 1)*n + n-1)) {
                return x[0];
            }
        }
        return 0;
    }
};
