typedef long long ll;
class Solution {
public:
    int minWastedSpace(vector<int>& packages, vector<vector<int>>& boxes) {
        int n = packages.size();
        sort(packages.begin(), packages.end());
        vector<ll>presum(n);
        
        ll pre = 0;
        for (int i=0; i<n; i++) {
            pre += packages[i];
            presum[i] = pre;
        }
        
        ll res = -1;
        ll M = 1e9 + 7;
        
        for (auto& box : boxes) {
            sort(box.begin(), box.end());
            int m = box.size();
            ll sum = 0;
            int last = -1;
            for (int i = 0; i < m; i++) {
                auto iter = upper_bound(packages.begin(), packages.end(), box[i]);
                if (iter == packages.begin()) continue;
                int j = prev(iter) - packages.begin();
                sum += (ll) (j - last) * (ll) box[i] - (presum[j] - (last == -1 ? 0 : presum[last]));
                last = j;
                if (j == n - 1) break;
            }
            if (last != n - 1) continue;
            if (res == -1) res = sum;
            else res = min(sum, res);
        }
        
        return res%M;
    }
};
