class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int left = 0, right = 0;
        for (auto box : weights) {
            left = max(left, box);
            right += box;
        }
        
        while (left < right) {
            int cap = left + (right - left)/2;
            if (checkOK(weights, cap, days)) {
                right = cap;
            }
            else left = cap + 1;
        }
        return left;
    }
    
    bool checkOK(vector<int>& weights, int cap, int days) {
        int count = 0;
        for (int i = 0; i < weights.size(); ) {
            int j = i;
            int sum = 0;
            while (j < weights.size() && sum + weights[j] <= cap) {
                sum += weights[j];
                j++;
            }
            count += 1;
            if (count > days) return false;
            i = j;
        }
        return true;
    }
};

//ref: https://leetcode.com/submissions/detail/755228004/

class Solution {
public:
   int countDays(vector<int>& ws, int tot_cap, int cur_cap = 0, int res = 1) {
  for (auto w : ws) {
    cur_cap += w;
    if (cur_cap > tot_cap) ++res, cur_cap = w;
  }
  return res;
}
int shipWithinDays(vector<int>& ws, int D) {
  auto r = accumulate(begin(ws), end(ws), 0);
  auto l = max(r / D, *max_element(begin(ws), end(ws)));
  while (l < r) {
    auto m = (l + r) / 2;
    if (countDays(ws, m) <= D) r = m;
    else l = m + 1;
  }
  return l;
}  
    
};
