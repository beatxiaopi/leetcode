using LL = long long;
class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        int n = nums.size();
        vector<LL>presum(n+1);
        for (int i = 1; i <= n; i++) {
            presum[i] = presum[i-1] + nums[i-1];
        }
        deque<int>dq;
        int res = INT_MAX/2;
        for (int i = 0; i <= n; i++) {
            while (!dq.empty() && presum[dq.back()] >= presum[i]) {
                dq.pop_back();
            }
            while (!dq.empty() && presum[i] - presum[dq.front()] >= k) {
                res = min(res, i - dq.front());
                dq.pop_front();
            }
            dq.push_back(i);
        }
        return res == INT_MAX/2? -1:res;
    }
};
