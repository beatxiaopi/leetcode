class Solution {
    public void solveSudoku(char[][] board) {
        dfs(board, 0, 0);
    }
    private boolean dfs(char [][] board, int i, int j) {
        if(i==9) return true;
        if(j==9) return dfs(board, i+1, 0);
        if(board[i][j]!='.') return dfs(board, i, j+1);
        for(char ch='1'; ch<='9'; ch++) {
            if(!isValid(board, i, j, ch)) continue;
            board[i][j]=ch;
            if(dfs(board, i, j+1)) return true;
            board[i][j]='.';
        }
        return false;
    }
    private boolean isValid(char [][] board, int i, int j, char ch) {
        for(int x=0; x<9; x++) 
            if(board[x][j]==ch) return false;
        for(int y=0; y<9; y++)
            if(board[i][y]==ch) return false;
        int m=i/3*3, n=j/3*3;
        for(int p=0; p<3; p++)
            for(int q=0; q<3; q++) 
                if(board[m+p][n+q]==ch) return false;
        return true;
    }
}
