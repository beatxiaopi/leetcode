class Solution {
    public boolean exist(char[][] board, String word) {
        int m=board.length;
        int n=board[0].length;
        if(word.length()>m*n) return false;
        char [] words= word.toCharArray();
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(dfs(board, i, j, words, 0)) return true;
            }
        }
        return false;
    }
    private boolean dfs(char[][]board, int i, int j, char [] words, int pos) {
        if(pos==words.length) return true;
        int m=board.length;
        int n=board[0].length;
        if (i<0 || i>= m || j<0 || j>=n) return false;
        char ch=words[pos];
        if (ch-board[i][j]!=0) return false;
        board[i][j]='#';
        boolean found=dfs(board, i+1, j, words, pos+1) || 
            dfs(board, i-1, j, words, pos+1) ||
            dfs(board, i, j+1, words, pos+1) ||
            dfs(board, i, j-1, words, pos+1);
        board[i][j]=ch;
        return found;
    }
}
