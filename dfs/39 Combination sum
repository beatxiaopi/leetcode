class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ret = new ArrayList<>();
        dfs(candidates, target, ret, new ArrayList<>(), 0);
        return ret;
    }
    private void dfs(int[] candidates, int target, List<List<Integer>> ret, 
                     List<Integer> temp, int ptr) {
        if(target == 0) {
            ret.add(new ArrayList<>(temp));
            return;
        }
        if(target < 0) {
            return;
        }
        for(int i = ptr; i < candidates.length; i++) {
            if(candidates[i] <= target) {
                temp.add(candidates[i]);
                dfs(candidates, target-candidates[i], ret, temp, i);
                temp.remove(temp.size()-1);
            }
        }
    }
}
