class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int [] candidates = new int [] {1, 2, 3, 4, 5, 6, 7, 8, 9};
        List<List<Integer>> ret = new ArrayList<>();
        dfs(candidates, k, n, ret, 0, 0, new ArrayList<>());
        return ret;
    }
    private void dfs(int [] candidates, int k, int n, List<List<Integer>> ret, 
                     int idx, int sum, List<Integer> temp) {
        if (sum == n && temp.size() == k) {
            ret.add(new ArrayList<>(temp));
            return;
        }
        if (sum > n || temp.size() > k) return;
        for (int i = idx; i<candidates.length; i++) {
            if (sum < n) {
                temp.add(candidates[i]);
                dfs(candidates, k, n, ret, i+1, sum+candidates[i], temp);
                temp.remove(temp.size()-1);
            }
        }
    }
    
}
