class Solution {
    public List<String> removeInvalidParentheses(String s) {
        int count=0, remove=0, maxLen =0;
        List<String> result = new ArrayList<>();
        for(char ch: s.toCharArray()) {
            if(ch=='(') count+=1;
            else if(ch==')') count-=1;
            if(count<0) {
                remove+=1;
                count+=1;
            }
        }
        remove+=count;
        maxLen=s.length()-remove;
        String currStr="";
        dfs(s, maxLen, 0, currStr, 0, result);
        return result;
    }
    private void dfs(String s, int maxLen, int i, String currStr, int count, List<String> result) {
        if(count<0) return;
        if(currStr.length()>maxLen) return;
        if(i==s.length()) {
            if(count==0 && currStr.length()==maxLen) {
                result.add(currStr);
                return;
            }
        }
        char ch;
        if(i<s.length()) {
            ch=s.charAt(i);
        }
        else ch=' ';
        if(ch!='(' && ch !=')') {
            dfs(s, maxLen, i+1, currStr+String.valueOf(ch), count, result);
        }
        else {
            dfs(s, maxLen, i+1, currStr+String.valueOf(ch), count+(ch=='('?1:-1), result);
            if(currStr.isEmpty() || ch!=currStr.charAt(currStr.length()-1)) {
                dfs(s, maxLen, i+1, currStr, count, result);
            }
        }
    }
}
