class Solution {
    public int maxEnvelopes(int[][] envps) {
        Arrays.sort(envps, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int p = 1, res = 1;
        for(int i = 1; i < envps.length; i++) {
            int h = envps[i][1];
            if(h > envps[p-1][1]) {
                envps[p++] = envps[i];
                res = Math.max(res, p);
            } 
            else if(h < envps[p-1][1]){
                int insertPos = binarySearch(envps, 0, p, h);
                envps[insertPos] = envps[i];
            }
        }
        return res;
    }
    
    private int binarySearch(int[][] arr, int s, int e, int v) {
        while(s < e) {
            int mid = s + (e - s) / 2;
            if(arr[mid][1] == v) return mid;
            if(arr[mid][1] < v) s = mid + 1;
            else e = mid;
        }
        return e;
    }
}
