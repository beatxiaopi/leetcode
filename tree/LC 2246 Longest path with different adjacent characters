class Solution {
    vector<int> children[500000];
    int len[100000];
    string s;
    int res = 1;
public:
    int longestPath(vector<int>& parent, string s) {
        this -> s = s;
        int n = parent.size();
        for (int i = 0; i < n; i++) {
            if (parent[i] != -1)
                children[parent[i]].push_back(i);
        }
        
        dfs(0);
        return res;
    }
    
    void dfs(int node) {
        if (children[node].size() == 0) {
            len[node] = 1;
            return;
        }
        int cur = 1;
        vector<int>temp;
        for (auto child : children[node]) {
            dfs(child);
            if (s[child] != s[node]) {
                cur = max(cur, len[child] + 1);
                temp.push_back(len[child]);
            }
        }
        len[node] = cur;
        sort(temp.rbegin(), temp.rend());
        if (temp.size() >= 2) 
            res = max(res, temp[0] + temp[1] + 1);
        else if (temp.size() == 1)
            res = max(res, temp[0] + 1);
        else 
            res = max(res, 1);
    }
};



//ref: fast solution from leetcode submission
class Solution {
public:
    int res;
    int dfs(vector<vector<int>> &graph, string &s, int u){
        int len1=0,len2=0;
        
        for(int i=0; i<graph[u].size(); i++){
            int v=graph[u][i];
            int len=dfs(graph,s,v);
            if(s[u]!=s[v]){
                if(len>len2) len2=len;
                if(len2>len1) swap(len1,len2);
            }
        }
        
        int ans=1+len1+len2;
        res=max(res,ans);
        return 1+max(len1,len2);
    }
    
    
    int longestPath(vector<int>& parent, string s) {
        int n=parent.size();
        vector<vector<int>> graph(n);
        
        for(int i=1; i<n; i++){
            int p=parent[i];
            graph[p].push_back(i);
        }
        res=0;
        int temp=dfs(graph,s,0);
        return res;
    }
};
