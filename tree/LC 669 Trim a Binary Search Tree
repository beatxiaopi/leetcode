/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //method 1: recursion
 
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if (root == NULL) return root;
        
        if (root->val < low) {
            TreeNode* right = trimBST(root->right, low, high);
            return right;
        }
        if (root->val > high) {
            TreeNode* left = trimBST(root->left, low, high);
            return left;
        }
        
        root->left = trimBST(root->left, low, high);
        root->right = trimBST(root->right, low, high);
        return root;
    }
};

/method 2: iterative

class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {

        if (root == NULL) return root;
        while (root != NULL && (root->val < low || root->val > high)){
            if (root->val < low) root = root->right;
            if (root->val > high) root = root->left;
            
        }
        
        TreeNode* p = root;
        while (p != NULL) {
            while(p->left != NULL && p->left->val < low) {
                p->left = p->left->right;
            }
            p = p->left;
        }
        p = root;
        while (p != NULL) {
            while(p->right != NULL && p->right->val > high) {
                p->right = p->right->left;
            }
            p = p->right;
        }
        
        return root;
    }
    
};
