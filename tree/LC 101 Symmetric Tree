/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //method 1: recursion
 
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == NULL) return true;
        return symmetric(root, root);
    }
    
    bool symmetric(TreeNode* a, TreeNode* b) {
        if (a == NULL || b == NULL) return a == b;
        if (a->val != b->val) return false;
        return symmetric(a->left, b->right) && symmetric(a->right, b->left);
    }
};

//method 2: (iterative)

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == NULL) return true;
        queue<TreeNode*>q;
        q.push(root);
        q.push(root);
        while (!q.empty()) {
            auto p1 = q.front();
            q.pop();
            auto p2 = q.front();
            q.pop();
            if (p1 == NULL && p2 == NULL) continue;
            if (p1 == NULL || p2 == NULL || p1->val != p2->val) return false;
            q.push(p1->left);
            q.push(p2->right);
            q.push(p1->right);
            q.push(p2->left);
        }
        return true;
    }
};
