/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //method 1: recursion
 
class Solution {
public:
    int minDepth(TreeNode* root) {
        if (root == NULL) return 0;
        int depth = 0;
        int left = minDepth(root->left) + 1;
        int right = minDepth(root->right) + 1;
        if (root->left == NULL && root->right != NULL) {
            return right;
        }
        if (root->left != NULL && root->right == NULL) {
            return left;
        }
        
        depth = min(left, right);
        return depth;
    }
};

//method 2: iterative

class Solution {
public:
    int minDepth(TreeNode* root) {
        if (root == NULL) return 0;
        int depth = 0;
        queue<TreeNode*>q;
        q.push(root);
        while (!q.empty()) {
            int n = q.size();
            depth++;
            while (n--) {
                auto p = q.front();
                q.pop();
                if (p->left != NULL) q.push(p->left);
                if (p->right != NULL) q.push(p->right);
                if (p->left == NULL && p->right == NULL) return depth;
                
            }
        }
        return depth;
    }
};
