class Solution {
    int count[30001];
    int visited[30001];
    vector<int>next[30001];
    int n;
    vector<int> res;
public:
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        this->n = n;
        res.resize(n);
        for (auto edge: edges) {
            next[edge[0]].push_back(edge[1]);
            next[edge[1]].push_back(edge[0]);
        }
        visited[0] = 1;
        dfs(0);
        for (int i = 1; i < n; i++) {
            visited[i] = 0;
        }
        res[0] = dfs1(0);
        for (int i = 1; i < n; i++) {
            visited[i] = 0;
        }
        dfs2(0);
        return res;
    }
    
    int dfs(int curr) {
        int sum = 1;
        for (auto x : next[curr]) {
            if (visited[x]) continue;
            visited[x] = 1;
            sum += dfs(x);
        }
        count[curr] = sum;
        return sum;
    }
    
    int dfs1(int curr) {
        int sum = 0;
        for (auto x : next[curr]) {
            if (visited[x]) continue;
            visited[x] = 1;
            sum += dfs1(x);
        }
        sum += count[curr] - 1;
        return sum;
    }
    
    void dfs2(int curr) {
        for (auto x : next[curr]) {
            if (visited[x]) continue;
            visited[x] = 1;
            res[x] = res[curr] + n - 2*count[x];
            dfs2(x);
        }
    }
};

//calculate count[i] = number of nodes in the subtree with i as the root;
//calculate the distance sum of nodes to root and store in the res vector;
//calculate the sum of distance of all child to new root;
//f(2) = f(0) - count[2] + (n - count[2]);

