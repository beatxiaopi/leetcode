/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/

class Solution {
    Node* first = NULL;
    Node* last = NULL;
public:
    Node* treeToDoublyList(Node* root) {
        if (root == NULL) return root;
        inOrder(root);
        first->left = last;
        last->right = first;
        return first;
    }
    
    void inOrder(Node* node) {
        if(node == NULL) return;
        inOrder(node->left);
        if (first == NULL) first = node;
        if (last != NULL) {
            last->right = node;
            node->left = last;
        }
        last = node;
        inOrder(node->right);
    }
};

//ref:https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/discuss/138621/C%2B%2B-solution
