method 1: iterative
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        string res;
        while (!q.empty()) {
            auto curr = q.front();
            q.pop();
            if (curr) {
                res += to_string(curr->val) + ",";
                q.push(curr->left);
                q.push(curr->right);
            }
            else res += "#,";
        }
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        vector<TreeNode*>arr;
        for (int i = 0; i < data.size(); i++) {
            int j = i;
            while (j < data.size() && data[j] != ',') {
                j++;
            }
            string str = data.substr(i, j-i);
            if (str != "#") {
                arr.push_back(new TreeNode(stoi(str)));
            }
            else arr.push_back(NULL);
            i = j;
        }
        int i = 0, j = 1;
        while (j < arr.size()) {
            if (arr[i]) {
                arr[i]->left = arr[j];
                arr[i]->right = arr[j+1];
                j += 2;
            }
            i++;
        }
        return arr[0];
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));

//method 2: Pre-order travesal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if (root == NULL) return "#";
        else return to_string(root->val) + "," + serialize(root->left) + "," + serialize(root->right);
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        vector<TreeNode*>arr;
        for (int i = 0; i < data.size(); i++) {
            int j = i;
            while (j < data.size() && data[j] != ',') {
                j++;
            }
            string str = data.substr(i, j-i);
            if (str != "#") {
                arr.push_back(new TreeNode(stoi(str)));
            }
            else arr.push_back(NULL);
            i = j;
        }
        return dfs(arr, 0);
        
    }
    
    TreeNode* dfs(vector<TreeNode*>& node, int curr) {
        if (node[curr] == NULL) return NULL;
        TreeNode* left = dfs(node, curr+1);
        int leftSize = getNum(left);
        TreeNode* right = dfs(node, curr+leftSize+1);
        node[curr]->left = left;
        node[curr]->right = right;
        return node[curr];
    }
    
    int getNum(TreeNode* node) {
        if (node == NULL) return 1;
        else return getNum(node->left) + getNum(node->right) + 1;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
