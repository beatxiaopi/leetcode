/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_set<int>valOfLeaves;
    unordered_set<int>visited;
    unordered_map<int, TreeNode*>valToRoot;
public:
    TreeNode* canMerge(vector<TreeNode*>& trees) {
        int n = trees.size();
        for (int i = 0; i < n; i++) {
            valToRoot[trees[i]->val] = trees[i];
            findLeaves(trees[i]->left);
            findLeaves(trees[i]->right);
        }
        
        TreeNode* root;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (valOfLeaves.find(trees[i]->val) == valOfLeaves.end()) {
                root = trees[i];
                count++;
            }
        }
        
        if(count != 1) return NULL;
        visited.insert(root->val);
        bool OK = dfs(root, 1, 5e4); 
        if (OK && visited.size() == n) return root;
        else return NULL;
    }
    
    void findLeaves(TreeNode* node) {
        if (node == NULL) return;
        valOfLeaves.insert(node->val);
        findLeaves(node->left);
        findLeaves(node->right);
    }
    
    bool dfs(TreeNode*& node, int a, int b) {
        if (node == NULL) return true;
        if (node->val < a || node->val > b) return false;
        int val = node->val;
        if (node->left || node->right) {
            return dfs(node->left, a, val-1) && dfs(node->right, val+1, b);
        }
        else if (valToRoot.find(val) != valToRoot.end()) {
            node = valToRoot[val];
            visited.insert(val);
            return dfs(node->left, a, val - 1) && dfs(node->right, val + 1, b);
            }
        return true;
    }
};


// 1: the root of the final binary search tree is confirmed and unique
// 2: every time we encounter a match of a leaf and a root, we do the merge
// 3: all the subtree need to be used to make a valid merge
// 4: we keep checking if the BST is legal when we construct the tree
