/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //method 1: recursion
 
class Solution {
public:
    int countNodes(TreeNode* root) {
        if (root == NULL) return 0;
        int leftHeight = 0, rightHeight = 0;
        if (root->left != NULL) leftHeight++;
        if (root->right != NULL) rightHeight++;
        if (root->left == NULL) return (2<<leftHeight) - 1;
        return countNodes(root->left) + countNodes(root->right) + 1;
    }
};

//method 2: iterative (binary search)

class Solution {
public:
    int countNodes(TreeNode* root) {
        if (root == NULL) return 0;
        int d = computeDepth(root);
        int left = pow(2,d), right = pow(2, d+1) - 1;
        while (left < right) {
            int mid = right - (right-left)/2;
            if (findK(root, mid)) {
                left = mid;
            }
            else right = mid - 1;
        }
        return left;
    }
    
    int computeDepth(TreeNode* node) {
        int d = 0;
        while (node->left) {
            node = node->left;
            d++;
        }
        return d;
    }
    
    bool findK(TreeNode* node, int k)  {
        vector<int>path;
        while (k > 0) {
            path.push_back(k);
            k /= 2;
        }
        for (int i = path.size() - 1; i >= 0; i--) {
            if (node == NULL) return false;
            if (i == 0) return true;
            if (path[i-1] == path[i]*2) node = node->left;
            else node = node->right;
        }
        return false;
    }
};
