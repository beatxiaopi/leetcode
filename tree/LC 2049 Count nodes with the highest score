using LL = long long;
class Solution {
    vector<vector<int>>children;
    unordered_map<LL, int>Map;
public:
    int countHighestScoreNodes(vector<int>& parents) {
        int n = parents.size();
        children.resize(n);
        for (int i = 1; i < n; i++) {
            children[parents[i]].push_back(i);
        }
        dfs(0);
        LL max = -1;
        LL num = 0;
        for (auto x : Map) {
            if (x.first > max) {
                max = x.first;
                num = x.second;
            }
        }
        return num;
    }
    
    int dfs(int node) {
        int n = children.size();
        vector<int>sub;
        int total = 0;
        for (auto child : children[node]) {
            sub.push_back(dfs(child));
            total += sub.back();
        }
        LL rest = n - (total +1);
        LL prod = 1;
        if (rest != 0) prod *= rest;
        for (auto x: sub) {
            if (x != 0) prod *= x;
        }
        
        Map[prod]++;
        return total + 1;
        
    }
};
