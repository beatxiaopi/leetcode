/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

//method 1: recursion

class Solution {
public:
    vector<int> postorder(Node* root) {
        vector<int>res;
        if (root == NULL) return res;
        postOrder(root, res);
        return res;
    }
    
    void postOrder(Node* node, vector<int>& curr) {
        if (node == NULL) return;
        for (auto x : node->children) {
            postOrder(x, curr);
        }
        curr.push_back(node->val);
    }
};

//method 2: iteration

class Solution {
public:
    vector<int> postorder(Node* root) {
        vector<int>res;
        if (root == NULL) return res;
        stack<Node*>stk;
        stk.push(root);
        while (!stk.empty()) {
            Node* curr = stk.top();
            stk.pop();
            res.push_back(curr->val);
            auto x = curr->children;
            if (x.size() > 0) {
                for (auto n:x) {
                    stk.push(n);
                }
            }
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
