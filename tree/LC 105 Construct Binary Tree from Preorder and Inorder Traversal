/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<int, int>pos;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.size() == 0) return NULL;
        for (int i = 0; i < inorder.size(); i++) {
            pos[inorder[i]] = i;
        }
        TreeNode* root = build(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() -1);
        return root;
    }
    
    TreeNode* build(vector<int>& preorder, int a, int b, vector<int>& inorder, int c, int d) {
        if (a > b) return NULL;
        int p = pos[preorder[a]];
        TreeNode* root = new TreeNode(preorder[a]);
        root->left = build(preorder, a+1, a+p-c, inorder, c, p-1);
        root->right = build(preorder, a+p-c+1, b, inorder, p+1, d);
        return root;
    }
};
