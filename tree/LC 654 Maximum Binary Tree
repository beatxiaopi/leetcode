/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if (nums.size() == 0) return NULL;
        TreeNode* root = build(nums, 0, nums.size()-1);
        return root;
    }
    
    TreeNode* build(vector<int>& nums, int a, int b) {
        if (a > b) return NULL;
        auto iter = max_element(nums.begin() + a, nums.begin() + b+1);
        int p = iter - nums.begin();
        TreeNode* root = new TreeNode(*iter);
        root->left = build(nums, a, p - 1);
        root->right = build(nums, p+1, b);
        return root;
    }
};
