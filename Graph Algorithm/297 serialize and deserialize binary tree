/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null) return "null";
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        StringBuilder tempStr= new StringBuilder();
        tempStr.append(Integer.toString(root.val));
        while(!q.isEmpty()) {
            TreeNode curr= q.poll();
            if (curr.left==null) {
                tempStr.append(" null");
            }
            else {
                tempStr.append(' ');
                tempStr.append(Integer.toString(curr.left.val));
                q.add(curr.left);
            }
            if(curr.right==null) {
                tempStr.append(" null");
            }
            else {
                tempStr.append(' ');
                tempStr.append(Integer.toString(curr.right.val));
                q.add(curr.right);
            }
        }
        return tempStr.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.equals("null")) return null;
        Queue<TreeNode> q = new LinkedList<>();
        String [] nodeVal= data.split(" ");
        TreeNode root= new TreeNode(Integer.valueOf(nodeVal[0]));
        int i=1;
        q.add(root);
        while (!q.isEmpty()) {
            TreeNode curr=q.poll();
            if(nodeVal[i].equals("null")) {
                curr.left=null;
            }
            else {
                curr.left= new TreeNode(Integer.valueOf(nodeVal[i]));
                q.add(curr.left);
            }
            i++;
            if(nodeVal[i].equals("null")) {
                curr.right=null;
            }
            else {
                curr.right= new TreeNode(Integer.valueOf(nodeVal[i]));
                q.add(curr.right);
            }
            i++;
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
