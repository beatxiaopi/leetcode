class Solution {
    public int largestIsland(int[][] grid) {
        int n = grid.length;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0,0);
        int colorIndex=2;
        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j]==1) {
                    int size= paint (grid, i, j, colorIndex);
                    map.put(colorIndex, size);
                    colorIndex++;
                }
            }
        }
        int res = map.getOrDefault(2,0);
        for (int i=0; i<n; i++){
            for (int j=0; j<n; j++) {
                if (grid[i][j]==0) {
                    Set<Integer> set= new HashSet<>();
                    set.add(i>0? grid[i-1][j]:0);
                    set.add(i<n-1? grid[i+1][j]:0);
                    set.add(j>0? grid[i][j-1]:0);
                    set.add(j<n-1? grid[i][j+1]:0);
                    int newSize = 1;
                    for (int color:set) newSize+=map.get(color);
                    res= Math.max(res, newSize);
                }
            }
        }
        return res;
    }
        int paint(int[][]grid, int i, int j, int color) {
            if(i<0 || i>grid.length-1 || j<0 || j>grid.length-1 || grid[i][j]!=1) return 0;
            grid[i][j]=color;
            return 1 + paint(grid, i-1, j, color) +paint(grid, i+1, j, color) 
                + paint(grid, i, j-1, color) + paint(grid, i, j+1, color);
        }
    }
