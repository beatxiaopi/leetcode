//method 1:
class Solution {
    unordered_map<int, int>freq;
    vector<pair<int, int>>arr;
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        vector<int>res;
        for (auto x : nums) {
            freq[x]++;
        }
        for (auto p : freq) {
            arr.push_back(p);
        }
        int l = 0, r = arr.size();
        while (l < r) {
            int mid = r - (r-l)/2;
            if (count(mid) >= k) {
                l = mid;
            }
            else r = mid - 1;
        }
        for (auto p : freq) {
            if (p.second >= l) res.push_back(p.first);
        }
        return res;
    }
    
    int count(int curr) {
        int f = 0;
        for (auto x : freq) {
            f += (x.second >=curr);
        }
        return f;
    }
};
//method 2:
class Solution {
    unordered_map<int, int>freq;
    vector<pair<int, int>>arr;
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        vector<int>res;
        for (auto x : nums) {
            freq[x]++;
        }
        for (auto p : freq) {
            arr.push_back(p);
        }
        int f = quick_select(0, arr.size() - 1, k);
        for (auto p : freq) {
            if (p.second >= f) {
                res.push_back(p.first);
            }
        }
        return res;
    }
    
    int quick_select(int a, int b, int k) {
        int i = a, t = a, j = b;
        int pivot = arr[(a+b)/2].second;
        while (t <= j) {
            if (arr[t].second > pivot) {
                swap(arr[j], arr[t]);
                j--;
            }
            else if (arr[t].second < pivot) {
                swap(arr[i], arr[t]);
                i++;
                t++;
            }
            else t++;
        }
        if (b - j >= k) return quick_select(j+1, b, k);
        else if (b - i + 1 >= k) return pivot;
        else return quick_select(a, i - 1, k - (b - i + 1));
    }
};
