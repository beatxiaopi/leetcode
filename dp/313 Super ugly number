class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        int [] dp = new int[n+1];
        dp[1] = 1;
        int [] pCount = new int[primes.length];
        Arrays.fill(pCount, 1);
        for (int i = 2; i <= n; i++) {
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                min = Math.min(dp[pCount[j]] * primes[j], min);
            }
            dp[i] = min;
            for (int j = 0; j < primes.length; j++) {
                if (dp[pCount[j]] * primes[j] == min) {
                    pCount[j] +=1;
                }
            }
        }
        return dp[n];
        //Original method using treemap is slow because of duplicate multiplications.
        // long [] res = new long[n];
        // TreeSet<Long> q = new TreeSet<>();
        // res[0] = 1;
        // q.add(res[0]);
        // for (int i = 1; i < n; i++) {
        //     long curr = q.pollFirst();
        //     for (int j = 0; j < primes.length; j++) {
        //         q.add(curr * primes[j]);
        //     }
        //     res[i] = q.first();
        // }
        // return (int) res[n-1];
    }
}
