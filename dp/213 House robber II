class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        int res = 0;
        if (n == 1) return nums[0];
        int rob = nums[1], norob = 0;
        for (int i = 2; i < n; i++) {
            int robTemp = rob, norobTemp = norob;
            norob = max(robTemp, norobTemp);
            rob = norobTemp + nums[i];
        }
        res = max(rob, norob);
        
        rob = nums[0], norob = 0;
        for (int i = 1; i < n - 1; i++) {
            int robTemp = rob, norobTemp = norob;
            norob = max(robTemp, norobTemp);
            rob = norobTemp + nums[i];
        }
        res = max(res, max(rob, norob));
        return res;
    }
};
//2D dp
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) return nums[0];
        auto dp = vector<vector<int>>(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = nums[i];
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                dp[i][j] = max(nums[i] + ((i+2 > j)? 0:dp[i+2][j]), dp[i+1][j]);
            }
        }
        return max(nums[0] + ((2 > n -2)? 0:dp[2][n-2]), dp[1][n-1]);
    }
};
