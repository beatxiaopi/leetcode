class Solution {
public:
    int maximumWhiteTiles(vector<vector<int>>& tiles, int carpetLen) {
        sort(tiles.begin(), tiles.end());
        int n = tiles.size();
        vector<int> presum(n);
        for (int i = 0; i < n; i++) {
            presum[i] = (i==0? 0: presum[i-1]) + (tiles[i][1] - tiles[i][0] + 1);
        }
        int j = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            while (j < n && tiles[i][0] + carpetLen - 1 >= tiles[j][1]) {
                j++;
            }
            int len = (j==0? carpetLen:presum[j-1]) - (i==0 ? 0: presum[i-1]);
            //find the longest coverage from i to j
            if (j < n && j> 0) {
                len += max(0, tiles[i][0] + carpetLen - 1 -tiles[j][0] + 1);
            }
            res = max(res, len);
        }
        return res;
    }
};
