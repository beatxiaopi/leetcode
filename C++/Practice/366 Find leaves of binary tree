/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<TreeNode*, vector<TreeNode*>> adj;
    unordered_map<TreeNode*, int> inDegree;
public:
    vector<vector<int>> findLeaves(TreeNode* root) {
        buildAdj(root, NULL);
        vector<vector<int>> res;
        queue<TreeNode*> q;
        for (auto & curr : inDegree) {
            if (curr.second == 0) {
                q.push(curr.first);
            }
        }
        while (!q.empty()) {
            int len = q.size();
            vector<int> temp;
            while (len--) {
                auto curr = q.front();
                q.pop();
                temp.push_back(curr -> val);
                for (auto & next : adj[curr]) {
                    inDegree[next]--;
                    if (inDegree[next] == 0) q.push(next);
                }
            }
            if(temp.size()) res.push_back(temp);
        }
        return res;
    }
    void buildAdj(TreeNode* root, TreeNode* parent) {
        if(!root) return;
        inDegree[root] = 0;
        if (parent) {
            inDegree[parent] += 1;
        }
        if (root -> left) {
            adj[root -> left].push_back(root);
        }
        if (root -> right) {
            adj[root -> right].push_back(root);
        }
        buildAdj(root -> left, root);
        buildAdj(root -> right, root);
    }
};
