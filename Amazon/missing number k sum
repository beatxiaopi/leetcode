

// Online C++ compiler to run C++ program online
#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <cmath>
#include <set>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <climits>
#include <numeric>
using namespace std;
using LL = long long;


int main() {
    // Write C++ code here
    vector<int> nums = {1, 3, 5, 7, 10};
    int n = nums.size(), k = 7;
    sort(nums.begin(), nums.end());
    vector<int>miss;
    int j = 1;
    for (int i = 0; i < n ; i++) {
        while (j < nums[i]) {
            miss.push_back(j);
            j++;
        }
        j = nums[i] + 1;
        cout<<"j="<<j<<";";
    }
    int a = k - miss.size(), res = 0;
    for (int i = 0; i < a; i++) {
        res += miss[i];
    }
    
    cout<<"res="<<res<<";"<<"a="<<a;

    return 0;
}
//  2, 4, 6, 8, 9
//  2+4 = 6


class Solution {
public:
long long minimalKSum(vector<int>& nums, int k) {
    nums.push_back(0);
    sort(nums.begin(), nums.end());
    int maxval;
    long long ret = 0;
    for(int i=0; i<nums.size()-1; i++) {
        int tmp = nums[i+1] - nums[i];
        if(tmp > 0) {
ret -= nums[i];
tmp--;
if(tmp >= k) {
    maxval = nums[i] + k;
    k = 0;
    break;
}
else
k -= tmp;
    if(k > 0) {
        ret -= nums.back();
        maxval = nums.back() + k;
    }
    ret += (((long long)(maxval)+1)*maxval)>>1;
    return ret;
    }
};
