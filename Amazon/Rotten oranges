class Solution {
    int memo[11][11];
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int fresh = 0;
        queue<pair<int, int>>q;
        for (int i = 0; i < m; i++) 
            for(int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    q.push({i,j});
                    //memo[i][j] = 1;
                }
                else if (grid[i][j] == 1) fresh++;
            }
        int res = -1;
        int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        while (!q.empty()) {
            int len = q.size();
            while (len--) {
                auto[x,y] = q.front();
                q.pop();
                for(int k = 0; k < 4; k++) {
                    int a = x + dir[k][0];
                    int b = y + dir[k][1];
                    if (a < 0 || a >= m || b < 0 || b >= n) continue;
                    if (grid[a][b] == 0 || grid[a][b] == 2) continue;
                    if (memo[a][b] == 1) continue;
                    grid[a][b] = 2;
                    q.push({a,b});
                    fresh--;
                    memo[a][b] = 1;
                }
            }
            res += 1;
        }
        if (fresh > 0) return -1;
        else if (res == -1) return 0;
        else return res;
    }
};
