class Solution {
    using LL = long long;
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        int n = points.size();
        vector<vector<int>>res;
        vector<pair<LL,int>>pool;
        for (int i = 0; i < n; i++) {
            LL d = points[i][0]*points[i][0] + points[i][1]*points[i][1];
            pool.push_back({d,i});
        }
        
        LL target = quick_select(0, n-1, pool, k);
        for (auto x : pool) {
            if (x.first <= target) res.push_back({points[x.second][0], points[x.second][1]});
        }
        return res;
    }
    
    LL quick_select(int a, int b, vector<pair<LL,int>>&pool, int k) {
        int i = a, t = a, j = b;
        LL pivot = pool[(a+b)/2].first;
        while (t <= j) {
            if (pool[t].first < pivot) {
                swap(pool[i], pool[t]);
                i++;
                t++;
            }
            else if (pool[t].first == pivot) {
                t++;
            }
            else {
                swap(pool[t], pool[j]);
                j--;
            }
        }
        if (i - a >= k) return quick_select(a, i, pool, k);
        else if (j - a + 1 >= k) return pivot;
        else return quick_select(j+1, b, pool, k-(j-a+1));
    }
};

// s s x x x L L L
//   i t     j
//step 1: if (pool[t].first < pool[i].first) swap (pool[t], pool[i]) i++; t++;
//step 2: if ()
