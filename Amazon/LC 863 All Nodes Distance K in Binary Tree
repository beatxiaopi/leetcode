/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    vector<int>res;
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        dfs(root, target, k);
        return res;
    }
    
    int dfs(TreeNode* node, TreeNode* target, int k) {
        if (node == NULL) return -1;
        if (node == target) {
            fetch(node, k);
            return 0;
        }
        int depth1 = dfs(node->left, target, k);
        if (depth1 != -1) {
            if (depth1 == k - 1) {
                res.push_back(node->val);
            }
            fetch(node->right, k-depth1-2);
            return depth1+1;
        }
        int depth2 = dfs(node->right, target, k);
        if (depth2 != -1) {
            if (depth2 == k - 1) {
                res.push_back(node->val);
            }
            fetch(node->left, k-depth2-2);
            return depth2+1;
        }
        return -1;
    }
    
    void fetch(TreeNode* node, int k) {
        if (node == NULL) return;
        if (k < 0) return;
        if (k == 0) {
            res.push_back(node->val);
            return;
        }
        fetch(node->left, k-1);
        fetch(node->right, k-1);
    }
};

Method 2:
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        dfs1(root);   //建边
        dfs2(target, k);  //遍历k范围以内的节点
        return ans;
    }
private:
    vector<int> ans;   //存储答案
    unordered_map<TreeNode*, TreeNode*> myHash;  //存储每个节点的父亲节点
    unordered_set<TreeNode*> mySet;   //在遍历k范围内的节点时要确定这个节点是否已经来过
    void dfs1(TreeNode* root){  //建边
        if(root == NULL)      //空节点直接返回
            return;
        myHash[root->left] = root;   //它的左右节点的父节点都是它
        myHash[root->right] = root;
        dfs1(root->left);   //搜索它的左右节点
        dfs1(root->right);
    }
    void dfs2(TreeNode* target, int k){    //遍历搜索
        if(target == NULL || mySet.find(target) != mySet.end())  //如果为空或者之前来过
            return;
        mySet.insert(target);  //记录下已经来过
        if(k-- == 0){   //如果k已经是0，即已经达到目标距离
            ans.push_back(target->val);  //加入答案
            return;
        }
        dfs2(target->left, k);   //继续搜索左右节点和父亲节点
        dfs2(target->right, k);
        dfs2(myHash[target], k);
    }
};
