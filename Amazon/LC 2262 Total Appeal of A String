class Solution {
public:
    long long appealSum(string s) {
        long long res = 0;
        int n = s.length();
        vector<int>lastPos(26, -1);
        for (int i = 0; i < n; i++) {
            int j = lastPos[s[i]-'a'];
            res += (long long) (i - j) * (n - i);
            lastPos[s[i]-'a'] = i;
        }
        return res;
    }
};

//      a
//      xxx yyyxz
//      6   45678
//      1   22223

// abbc a

// 012345
// aabbca
  
     


// 012345
// aabbca
//    s
//      e

// sum = 1 + 2*1 + 2*2 + 2*2 + 2*3 + 4*3

// mem = [a: 5, b: 3, c: 4]
 
// seq_num = s + 1 = 3
// curr_sum = # elements in mem = 3

// covered:
// [0,0], [0,1], [0,2], [0,3], [0,4], [0,5]
// [1,1], [1,2], [1,2], [1,4], [1,5]
// [2,5]
// [3,5]



// a:yes
// b:yes
// c:yes
// d:yes

// a: 0 4
// b: 1
// c: 3
    
// answer+4
//     N [0, x] O(N^2)
    

