typedef array<int, 3> AI3;
class Solution {
    int visited[101][101];
public:
    int minCost(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        priority_queue<AI3, vector<AI3>, greater<>>pq;
        pq.push({0,0,0});
        auto dir = vector<pair<int, int>>({{0, 1}, {0, -1}, {1, 0}, {-1, 0}});
        while (!pq.empty()) {
            auto [cost, x, y] = pq.top();
            pq.pop();
            if (visited[x][y]) continue;
            visited[x][y] = 1;
            if (x == m - 1 && y == n - 1) return cost;
            
            for (int k = 0; k < 4; k++) {
                int a = x + dir[k].first;
                int b = y + dir[k].second;
                if (a < 0 || a >= m || b < 0 || b >= n) continue;
                if (visited[a][b]) continue;
                int add = grid[x][y] == k+1? 0 : 1;
                pq.push({cost + add, a, b});
            }
        }
        return -1;
    }
};
