using PDI = pair<double, int>;
class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        
        vector<vector<PDI>>adj(n);
        for (int i = 0; i < edges.size(); i++) {
            int a = edges[i][0];
            int b = edges[i][1];
            double p = succProb[i];
            adj[a].push_back({-log(p), b});
            adj[b].push_back({-log(p), a});
        }
        
        priority_queue<PDI, vector<PDI>, greater<>> pq;
        pq.push({0, start});
        vector<int>visited(n, 0);
        
        while(!pq.empty()) {
            auto [prob, pos] = pq.top();
            pq.pop();
            if (visited[pos]) continue;
            visited[pos] = 1;
            if (pos == end) return exp(-prob);
            for (auto next : adj[pos]) {
                double nprob = next.first;
                int node = next.second;
                if(visited[node]) continue;
                pq.push({prob + nprob, node});
            }
        }
        return 0;
    }
};
